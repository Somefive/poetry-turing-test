{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","Autoplay","API_HREF","App","props","state","model","username","score","turingTests","mode","countDown","rank","rankTotal","guiding","poetries","_","shuffle","timer","undefined","swiper","renderModeButton","color","onClick","setState","style","background","borderColor","borderRadius","margin","capitalize","className","size","placeholder","prefix","UserOutlined","suffix","ArrowRightOutlined","this","length","login","value","onChange","e","target","onPressEnter","message","warning","axios","get","then","data","tests","map","test","index","answer_id","catch","err","error","toFixed","poetry","parent","heightpercent","Math","floor","cases","title","author","dynasty","content","id","newState","height","line","idx","poetryTest","_case","renderPoetry","post","select_id","options","total","reset","clearTimeout","setTimeout","realIndex","slides","submit","slideNext","onSlideChange","spaceBetween","slidesPerView","pagination","clickable","scrollbar","draggable","onSwiper","allowSlidePrev","renderPoetryTest","type","shape","icon","RobotOutlined","indexOf","process","backgroundSize","renderLogin","renderPoetryTuringTest","renderScoreBoard","renderTimer","renderGuide","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c84a01ec.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.css'\nimport { Input, message, Button } from 'antd'\nimport { UserOutlined, ArrowRightOutlined, RobotOutlined } from '@ant-design/icons'\nimport { Component } from 'react'\nimport _ from 'lodash'\nimport poetries from './poetries.json'\nimport axios from 'axios'\n\n// import Swiper core and required components\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Autoplay } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\n\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss'\nimport 'swiper/components/pagination/pagination.scss'\nimport 'swiper/components/scrollbar/scrollbar.scss'\n\n// install Swiper components\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y, Autoplay]);\n\nconst API_HREF = 'http://120.92.50.21:19544'\n\nexport default class App extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          model: 'login',\n          username: '',\n          score: 0,\n          turingTests: [],\n          mode: 'easy',\n          countDown: 0,\n          rank: 0,\n          rankTotal: 0,\n          guiding: 'firsttime'\n      }\n      this.poetries = _.shuffle(poetries)\n      this.timer = undefined\n      this.swiper = undefined\n    }\n\n    renderLogin() {\n      const renderModeButton = (mode, color) => {\n        return <Button onClick={() => this.setState({mode})} style={{\n          color: mode === this.state.mode ? 'white' : 'black',\n          background: mode === this.state.mode ? color : 'white',\n          borderColor: color,\n          borderRadius: 0,\n          margin: '0.25em 0.75em'\n        }}>{_.capitalize(mode)}</Button>\n      }\n      return (\n        <div className=\"login\">\n          <div className=\"header\">作诗图灵测试</div>\n          <Input\n            size=\"large\"\n            placeholder=\"请输入您的名字或昵称\"\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            suffix={\n              <ArrowRightOutlined className=\"enter-btn\" style={{color: this.state.username.length === 0 ? 'lightgray' : 'black'}} onClick={() => this.login()}/>\n            }\n            value={this.state.username}\n            onChange={e => this.setState({username: e.target.value})}\n            onPressEnter={() => this.login()}\n          />\n          <div className=\"mode-choice\">\n              {renderModeButton('easy', '#7cb305')}\n              {renderModeButton('hard', '#cf1322')}\n              {renderModeButton('lunatic', '#531dab')}\n          </div>\n          <div className=\"description\">\n            {this.state.mode === 'easy' && '在作诗图灵测试的Easy模式中，您将会被展现5组诗歌（包括标题、作者及内容），每组包括1首由诗人创作的诗歌和1首AI创作的诗歌，请选择您认为由人创作的诗歌。所有组选择完成后，您将会得知有多少组结果正确。'}\n            {this.state.mode === 'hard' && '在作诗图灵测试的Hard模式中，您将会被展现10组诗歌（包括标题及内容），每组包括1首由诗人创作的诗歌和2首AI创作的诗歌，请选择您认为由人创作的诗歌，每组回答限时1分钟。所有组选择完成后，您将会得知有多少组结果正确。结果将被计入Hard模式排行榜。'}\n            {this.state.mode === 'lunatic' && '在作诗图灵测试的Lunatic模式中，您将会被展现20组诗歌（仅包括诗歌内容），每组包括3首诗歌，其中至多包含1首由人创作的诗歌，请选择您认为由人创作的诗歌（若没有，则不选择），每组回答限时30秒。所有组选择完成后，您将会得知有多少组结果正确。结果将被计入Lunatic模式排行榜。'}\n          </div>\n        </div>\n      )\n    }\n\n    login() {\n      if (this.state.username.length === 0) message.warning('输入的名称不能为空')\n      else {\n        axios.get(`${API_HREF}/get-turing-tests/${this.state.mode}`).then(data => {\n          const turingTests = data.data.tests.map((test, index) => { return {\n            ...test, answer_id: '', index\n          }})\n          this.setState({model: 'poetry-turing-test', turingTests})\n        }).catch(err => {\n          message.error(err)\n        })\n      }\n    }\n\n    renderScoreBoard() {\n      return (\n        <div className=\"score-board\">\n          <div className=\"header\">\n            <div>{this.state.username}</div>\n            <div>您的得分是：<span className=\"user-score\">{this.state.score}</span> / {this.state.turingTests.length}</div>\n            <div>超越了<span className=\"user-rank\">{(100 - this.state.rank * 100 / this.state.rankTotal).toFixed(2)}%</span>的人</div>\n          </div>\n          <div className=\"retry-btn\"><Button size=\"large\" onClick={() => this.setState({model: 'login'})}>再来一次</Button></div>\n        </div>\n      )\n    }\n\n    renderPoetry(poetry, parent) {\n      const heightpercent = Math.floor(100 / parent.cases.length)\n      const title = parent.title\n      const author = parent.author\n      const dynasty = parent.dynasty\n      const content = poetry.content\n      return (\n        <div className={`poetry-card ${poetry.id === parent.answer_id ? 'selected': ''}`} onClick={() => {\n          const tests = this.state.turingTests\n          if (tests[parent.index].answer_id === poetry.id) tests[parent.index].answer_id = ''\n          else tests[parent.index].answer_id = poetry.id\n          let newState = {turingTests: tests}\n          if (this.state.guiding === 'choosing') newState.guiding = 'goto-next'\n          this.setState(newState)\n        }} style={{\n          height: `calc(${heightpercent}% - 1em)`\n        }}>\n          <div className=\"poetry-card-inner\">\n            {title && <div className=\"title\">{title}</div>}\n            {author && dynasty && <div className=\"author\">{dynasty && dynasty + ' '}{author}</div>}\n            {content && content.map((line, idx) => <div className=\"line\" idx={idx}>{line}</div>)}\n          </div>\n        </div>\n      )\n    }\n\n    renderPoetryTest(poetryTest) {\n      return (\n        <SwiperSlide key={poetryTest.index}>\n          <div className=\"poetry-container\">\n            <div className=\"poetry-inner\">\n              {poetryTest && poetryTest.cases && poetryTest.cases.map(_case => this.renderPoetry(_case, poetryTest))}\n            </div>\n          </div>\n        </SwiperSlide>\n      )\n    }\n\n    submit() {\n      if (this.state.guiding !== '' && this.state.guiding !== 'submitting') return\n      axios.post(`${API_HREF}/get-score`, {\n        'username': this.state.username,\n        'mode': this.state.mode,\n        'answers': this.state.turingTests.map(test => { return {\n          select_id: test.answer_id,\n          options: test.cases.map(_case => _case.id)\n        }})\n      }).then(data => {\n        const score = data.data.score\n        const rank = data.data.rank\n        const rankTotal = data.data.total\n        let newState = {score, rank, rankTotal, model: 'score-board'}\n        if (this.state.guiding === 'submitting') newState.guiding = 'finish'\n        this.setState(newState)\n      })\n    }\n\n    onSlideChange(reset) {\n      if (this.timer) {\n        clearTimeout(this.timer)\n        this.timer = undefined\n      }\n      if (this.state.mode !== 'easy') {\n        if (reset) {\n          this.setState({countDown: this.state.mode === 'hard' ? 60 : 30})\n        }\n        this.timer = setTimeout(() => {\n          if (this.state.countDown === 1) {\n            if (this.swiper) {\n              if (this.swiper.realIndex === this.swiper.slides.length - 1) {\n                this.submit()\n              } else {\n                this.swiper.slideNext()\n              }\n            }\n          } else {\n            this.setState({countDown: this.state.countDown - 1})\n            this.onSlideChange(false)\n          }\n        }, 1000)\n      } else if (this.state.guiding === 'swiping') {\n        this.setState({guiding: 'click-submit'})\n      }\n    }\n\n    renderPoetryTuringTest() {\n      return (\n        <div className=\"turing-test\">\n          <Swiper\n            spaceBetween={50}\n            slidesPerView={1}\n            // navigation\n            pagination={{ clickable: true }}\n            scrollbar={{ draggable: true }}\n            onSlideChange={() => this.onSlideChange(true)}\n            onSwiper={(swiper) => {\n              this.swiper = swiper\n              this.onSlideChange(true)\n            }}\n            allowSlidePrev={this.state.mode === 'easy'}\n          >\n            {this.state.turingTests.map(poetryTest => this.renderPoetryTest(poetryTest))}\n          </Swiper>\n          <div className=\"submit-btn\">\n            <Button type=\"primary\" shape=\"circle\" icon={<RobotOutlined />} onClick={() => this.submit()}/>\n          </div>\n        </div>\n      )\n    }\n\n    renderTimer() {\n      return (\n        <div className=\"timer\">\n          <Button style={{borderColor: this.state.countDown <= 10 ? 'red' : 'darkgray'}} type=\"default\" shape=\"circle\">{(this.state.countDown >= 10 ? \"\" : \" \") + `${this.state.countDown}`}</Button>\n        </div>\n      )\n    }\n\n    renderGuide() {\n      return <div className=\"guide\">\n        {this.state.mode === 'easy' && ['', 'choosing', 'swiping', 'submitting'].indexOf(this.state.guiding) < 0 && <div className=\"guide-mask\">\n          <div className=\"guide-container\">\n            <div className=\"welcome\">\n              {this.state.guiding === 'firsttime' && 'Hi，欢迎参加作诗图灵测试。'}\n              {this.state.guiding === 'make-choice' && '点击您认为是真实的诗人所作的诗。'}\n              {this.state.guiding === 'choosing' && ''}\n              {this.state.guiding === 'goto-next' && '向左滑动进入下一首。'}\n              {this.state.guiding === 'swiping' && ''}\n              {this.state.guiding === 'click-submit' && '继续进行剩下的答题，然后点击右下角的提交按钮完成测试。'}\n              {this.state.guiding === 'submitting' && ''}\n              {this.state.guiding === 'finish' && '恭喜您完成测试教程！现在您可以选择任一难度开始挑战。'}\n            </div>\n            <div className=\"skip\">\n              {this.state.guiding !== 'finish' && <Button className=\"btn next-btn\" onClick={() => {\n                let guiding = 'make-choice'\n                if (this.state.guiding === 'make-choice') guiding = 'choosing'\n                if (this.state.guiding === 'goto-next') guiding = 'swiping'\n                if (this.state.guiding === 'click-submit') guiding = 'submitting'\n                this.setState({guiding})\n              }}>下一步</Button>}\n              <Button className=\"btn skip-btn\" style={{color: 'white', background: '#00474f', borderColor: '#00474f'}} onClick={() => this.setState({guiding: ''})}>\n                {this.state.guiding === 'finish' ? '完成教程' : '跳过教程'}\n              </Button>\n            </div>\n          </div>\n        </div>}\n      </div>\n    }\n\n    render() {\n      return (\n        <div className=\"App\" style={{background: `url(${process.env.PUBLIC_URL}/background.png)`, backgroundSize: 'cover'}}>\n          <div className=\"App-inner\">\n            {this.state.model === 'login' && this.renderLogin()}\n            {this.state.model === 'poetry-turing-test' && this.renderPoetryTuringTest()}\n            {this.state.model === 'score-board' && this.renderScoreBoard()}\n            {this.state.model === 'poetry-turing-test' && this.state.mode !== 'easy' && this.renderTimer()}\n          </div>\n          {(this.state.model === 'poetry-turing-test' || this.state.model === 'score-board') && this.state.guiding !== '' && this.renderGuide()}\n        </div>\n      )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}