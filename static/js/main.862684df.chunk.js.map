{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","App","props","state","model","username","score","testSize","testOffset","turingTests","mode","poetries","_","shuffle","className","size","placeholder","prefix","UserOutlined","suffix","ArrowRightOutlined","style","color","this","length","onClick","login","value","onChange","e","setState","target","onPressEnter","message","warning","tests","i","poetry","ai_lines","is_first","random","push","index","first","id","title","author","dynasty","lines","second","human_id","answer_id","parent","map","line","idx","poetryTest","renderPoetry","countBy","t","true","submittable","undefined","find","spaceBetween","slidesPerView","pagination","clickable","scrollbar","draggable","onSlideChange","console","log","onSwiper","swiper","renderPoetryTest","type","shape","icon","RobotOutlined","disabled","submit","renderLogin","renderPoetryTuringTest","renderScoreBoard","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.862684df.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.css'\nimport { Input, message, Button, Radio } from 'antd'\nimport { UserOutlined, ArrowRightOutlined, RobotOutlined } from '@ant-design/icons'\nimport { Component } from 'react'\nimport _ from 'lodash'\nimport poetries from './poetries.json'\n\n// import Swiper core and required components\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\n\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss'\nimport 'swiper/components/pagination/pagination.scss'\nimport 'swiper/components/scrollbar/scrollbar.scss'\n\n// install Swiper components\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\n\nexport default class App extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          model: 'login',\n          username: '',\n          score: 0,\n          testSize: 5,\n          testOffset: 0,\n          turingTests: [],\n          mode: 'easy'\n      }\n      this.poetries = _.shuffle(poetries)\n    }\n\n    renderLogin() {\n      // renderModeButton = (mode, color) => <Button onClick={() => this.setState({mode})}></Button>\n      return (\n        <div className=\"login\">\n          <div className=\"header\">作诗图灵测试</div>\n          <Input\n            size=\"large\"\n            placeholder=\"请输入您的名字或昵称\"\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            suffix={\n              <ArrowRightOutlined className=\"enter-btn\" style={{color: this.state.username.length === 0 ? 'lightgray' : 'black'}} onClick={() => this.login()}/>\n            }\n            value={this.state.username}\n            onChange={e => this.setState({username: e.target.value})}\n            onPressEnter={() => this.login()}\n          />\n          {/* <div className=\"mode-choice\">\n              <Button onClick>Easy</Button>\n              <Button>Hard</Button>\n              <Button>Lunatic</Button>\n          </div> */}\n        </div>\n      )\n    }\n\n    login() {\n      if (this.state.username.length === 0) message.warning('输入的名称不能为空')\n      else {\n        let tests = []\n        for (let i = 0; i < this.state.testSize; ++i) {\n          let poetry = this.poetries[(i + this.state.testOffset) % this.poetries.length]\n          let ai_lines = _.shuffle(poetry['ai-lines'])[0]\n          let is_first = _.random(0, 1) < 0.5\n          tests.push({\n            index: i,\n            first: {\n              id: 0,\n              title: poetry.title,\n              author: poetry.author,\n              dynasty: poetry.dynasty,\n              lines: is_first ? poetry.lines : ai_lines,\n            },\n            second: {\n              id: 1,\n              title: poetry.title,\n              author: poetry.author,\n              dynasty: poetry.dynasty,\n              lines: is_first ? ai_lines : poetry.lines,\n            },\n            human_id: is_first ? 0 : 1,\n            answer_id: -1,\n          })\n        }\n        this.setState({model: 'poetry-turing-test', turingTests: tests})\n      }\n    }\n\n    renderScoreBoard() {\n      return (\n        <div className=\"score-board\">\n          <div className=\"header\">\n            <div>{this.state.username}</div>\n            <div>您的得分是：<span className=\"user-score\">{this.state.score}</span> / {this.state.testSize}</div>\n          </div>\n          <div className=\"retry-btn\"><Button size=\"large\" onClick={() => this.setState({model: 'login', testOffset: this.state.testOffset + this.state.testSize})}>再来一次</Button></div>\n        </div>\n      )\n    }\n\n    renderPoetry(poetry, parent) {\n      return (\n        <div className={`poetry-card ${poetry.id === parent.answer_id ? 'selected': ''}`} onClick={() => {\n          const tests = this.state.turingTests\n          if (tests[parent.index].answer_id === poetry.id) tests[parent.index].answer_id = -1\n          else tests[parent.index].answer_id = poetry.id\n          this.setState({turingTests: tests})\n        }}>\n          <div className=\"poetry-card-inner\">\n            <div className=\"title\">{poetry.title}</div>\n            <div className=\"author\">{poetry.dynasty && poetry.dynasty + ' '}{poetry.author}</div>\n            {poetry.lines.map((line, idx) => <div className=\"line\" idx={idx}>{line}</div>)}\n          </div>\n        </div>\n      )\n    }\n\n    renderPoetryTest(poetryTest) {\n      return (\n        <SwiperSlide>\n          <div className=\"poetry-container\">\n            <div className=\"poetry-inner\">\n              {this.renderPoetry(poetryTest.first, poetryTest)}\n              {this.renderPoetry(poetryTest.second, poetryTest)}\n            </div>\n          </div>\n        </SwiperSlide>\n      )\n    }\n\n    submit() {\n      const score = _.countBy(this.state.turingTests, t => t.answer_id === t.human_id).true\n      this.setState({score, model: 'score-board'})\n    }\n\n    renderPoetryTuringTest() {\n      const submittable = _.find(this.state.turingTests, t => t.answer_id < 0) === undefined\n      return (\n        <div className=\"turing-test\">\n          <Swiper\n            spaceBetween={50}\n            slidesPerView={1}\n            // navigation\n            pagination={{ clickable: true }}\n            scrollbar={{ draggable: true }}\n            onSlideChange={() => console.log('slide change')}\n            onSwiper={(swiper) => console.log(swiper)}\n          >\n            {this.state.turingTests.map(poetryTest => this.renderPoetryTest(poetryTest))}\n          </Swiper>\n          <div className=\"submit-btn\">\n            <Button type=\"primary\" shape=\"circle\" icon={<RobotOutlined />} disabled={!submittable} onClick={() => this.submit()}/>\n          </div>\n        </div>\n      )\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n              {this.state.model === 'login' && this.renderLogin()}\n              {this.state.model === 'poetry-turing-test' && this.renderPoetryTuringTest()}\n              {this.state.model === 'score-board' && this.renderScoreBoard()}\n            </div>\n        )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}