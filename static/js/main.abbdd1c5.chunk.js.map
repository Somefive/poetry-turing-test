{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","Autoplay","App","props","state","model","username","score","testSize","testOffset","turingTests","mode","countDown","poetries","_","shuffle","timer","undefined","swiper","renderModeButton","color","onClick","setState","style","background","borderColor","borderRadius","margin","capitalize","className","size","placeholder","prefix","UserOutlined","suffix","ArrowRightOutlined","this","length","login","value","onChange","e","target","onPressEnter","message","warning","tests","i","poetry","ai_lines","is_first","random","push","index","first","id","title","author","dynasty","lines","second","human_id","answer_id","parent","map","line","idx","poetryTest","renderPoetry","countBy","t","true","reset","clearTimeout","setTimeout","realIndex","slides","submit","slideNext","onSlideChange","spaceBetween","slidesPerView","pagination","clickable","scrollbar","draggable","onSwiper","allowSlidePrev","renderPoetryTest","type","shape","icon","RobotOutlined","renderLogin","renderPoetryTuringTest","renderScoreBoard","renderTimer","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abbdd1c5.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.css'\nimport { Input, message, Button } from 'antd'\nimport { UserOutlined, ArrowRightOutlined, RobotOutlined } from '@ant-design/icons'\nimport { Component } from 'react'\nimport _ from 'lodash'\nimport poetries from './poetries.json'\n\n// import Swiper core and required components\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Autoplay } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\n\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss'\nimport 'swiper/components/pagination/pagination.scss'\nimport 'swiper/components/scrollbar/scrollbar.scss'\n\n// install Swiper components\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y, Autoplay]);\n\nexport default class App extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          model: 'login',\n          username: '',\n          score: 0,\n          testSize: 5,\n          testOffset: 0,\n          turingTests: [],\n          mode: 'easy',\n          countDown: 0\n      }\n      this.poetries = _.shuffle(poetries)\n      this.timer = undefined\n      this.swiper = undefined\n    }\n\n    renderLogin() {\n      const renderModeButton = (mode, color) => {\n        return <Button onClick={() => this.setState({mode})} style={{\n          color: mode === this.state.mode ? 'white' : 'black',\n          background: mode === this.state.mode ? color : 'white',\n          borderColor: color,\n          borderRadius: 0,\n          margin: '0.25em 0.75em'\n        }}>{_.capitalize(mode)}</Button>\n      }\n      return (\n        <div className=\"login\">\n          <div className=\"header\">作诗图灵测试</div>\n          <Input\n            size=\"large\"\n            placeholder=\"请输入您的名字或昵称\"\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            suffix={\n              <ArrowRightOutlined className=\"enter-btn\" style={{color: this.state.username.length === 0 ? 'lightgray' : 'black'}} onClick={() => this.login()}/>\n            }\n            value={this.state.username}\n            onChange={e => this.setState({username: e.target.value})}\n            onPressEnter={() => this.login()}\n          />\n          <div className=\"mode-choice\">\n              {renderModeButton('easy', '#7cb305')}\n              {renderModeButton('hard', '#cf1322')}\n              {renderModeButton('lunatic', '#531dab')}\n          </div>\n          <div className=\"description\">\n            {this.state.mode === 'easy' && '在作诗图灵测试的Easy模式中，您将会被展现5组诗歌（包括标题、作者及内容），每组包括1首由诗人创作的诗歌和1首AI创作的诗歌，请选择您认为由人创作的诗歌。所有组选择完成后，您将会得知有多少组结果正确。'}\n            {this.state.mode === 'hard' && '在作诗图灵测试的Hard模式中，您将会被展现10组诗歌（包括标题及内容），每组包括1首由诗人创作的诗歌和2首AI创作的诗歌，请选择您认为由人创作的诗歌，每组回答限时1分钟。所有组选择完成后，您将会得知有多少组结果正确。结果将被计入Hard模式排行榜。'}\n            {this.state.mode === 'lunatic' && '在作诗图灵测试的Lunatic模式中，您将会被展现20组诗歌（仅包括诗歌内容），每组包括3首诗歌，其中至多包含1首由人创作的诗歌，请选择您认为由人创作的诗歌（若没有，则不选择），每组回答限时30秒。所有组选择完成后，您将会得知有多少组结果正确。结果将被计入Lunatic模式排行榜。'}\n          </div>\n        </div>\n      )\n    }\n\n    login() {\n      if (this.state.username.length === 0) message.warning('输入的名称不能为空')\n      else {\n        let tests = []\n        for (let i = 0; i < this.state.testSize; ++i) {\n          let poetry = this.poetries[(i + this.state.testOffset) % this.poetries.length]\n          let ai_lines = _.shuffle(poetry['ai-lines'])[0]\n          let is_first = _.random(0, 1) < 0.5\n          tests.push({\n            index: i,\n            first: {\n              id: 0,\n              title: poetry.title,\n              author: poetry.author,\n              dynasty: poetry.dynasty,\n              lines: is_first ? poetry.lines : ai_lines,\n            },\n            second: {\n              id: 1,\n              title: poetry.title,\n              author: poetry.author,\n              dynasty: poetry.dynasty,\n              lines: is_first ? ai_lines : poetry.lines,\n            },\n            human_id: is_first ? 0 : 1,\n            answer_id: -1,\n          })\n        }\n        this.setState({model: 'poetry-turing-test', turingTests: tests})\n      }\n    }\n\n    renderScoreBoard() {\n      return (\n        <div className=\"score-board\">\n          <div className=\"header\">\n            <div>{this.state.username}</div>\n            <div>您的得分是：<span className=\"user-score\">{this.state.score}</span> / {this.state.testSize}</div>\n          </div>\n          <div className=\"retry-btn\"><Button size=\"large\" onClick={() => this.setState({model: 'login', testOffset: this.state.testOffset + this.state.testSize})}>再来一次</Button></div>\n        </div>\n      )\n    }\n\n    renderPoetry(poetry, parent) {\n      return (\n        <div className={`poetry-card ${poetry.id === parent.answer_id ? 'selected': ''}`} onClick={() => {\n          const tests = this.state.turingTests\n          if (tests[parent.index].answer_id === poetry.id) tests[parent.index].answer_id = -1\n          else tests[parent.index].answer_id = poetry.id\n          this.setState({turingTests: tests})\n        }}>\n          <div className=\"poetry-card-inner\">\n            <div className=\"title\">{poetry.title}</div>\n            <div className=\"author\">{poetry.dynasty && poetry.dynasty + ' '}{poetry.author}</div>\n            {poetry.lines.map((line, idx) => <div className=\"line\" idx={idx}>{line}</div>)}\n          </div>\n        </div>\n      )\n    }\n\n    renderPoetryTest(poetryTest) {\n      return (\n        <SwiperSlide key={poetryTest.index}>\n          <div className=\"poetry-container\">\n            <div className=\"poetry-inner\">\n              {this.renderPoetry(poetryTest.first, poetryTest)}\n              {this.renderPoetry(poetryTest.second, poetryTest)}\n            </div>\n          </div>\n        </SwiperSlide>\n      )\n    }\n\n    submit() {\n      const score = _.countBy(this.state.turingTests, t => t.answer_id === t.human_id).true || 0\n      this.setState({score, model: 'score-board'})\n    }\n\n    onSlideChange(reset) {\n      if (this.timer) {\n        clearTimeout(this.timer)\n        this.timer = undefined\n      }\n      if (this.state.mode !== 'easy') {\n        if (reset) {\n          this.setState({countDown: this.state.mode === 'hard' ? 60 : 30})\n        }\n        this.timer = setTimeout(() => {\n          if (this.state.countDown === 1) {\n            if (this.swiper) {\n              if (this.swiper.realIndex === this.swiper.slides.length - 1) {\n                this.submit()\n              } else {\n                this.swiper.slideNext()\n              }\n            }\n          } else {\n            this.setState({countDown: this.state.countDown - 1})\n            this.onSlideChange(false)\n          }\n        }, 1000)\n      }\n    }\n\n    renderPoetryTuringTest() {\n      return (\n        <div className=\"turing-test\">\n          <Swiper\n            spaceBetween={50}\n            slidesPerView={1}\n            // navigation\n            pagination={{ clickable: true }}\n            scrollbar={{ draggable: true }}\n            onSlideChange={() => this.onSlideChange(true)}\n            onSwiper={(swiper) => {\n              this.swiper = swiper\n              this.onSlideChange(true)\n            }}\n            allowSlidePrev={this.state.mode === 'easy'}\n          >\n            {this.state.turingTests.map(poetryTest => this.renderPoetryTest(poetryTest))}\n          </Swiper>\n          <div className=\"submit-btn\">\n            <Button type=\"primary\" shape=\"circle\" icon={<RobotOutlined />} onClick={() => this.submit()}/>\n          </div>\n        </div>\n      )\n    }\n\n    renderTimer() {\n      return (\n        <div className=\"timer\">\n          <Button style={{borderColor: this.state.countDown <= 10 ? 'red' : 'darkgray'}} type=\"default\" shape=\"circle\">{(this.state.countDown >= 10 ? \"\" : \" \") + `${this.state.countDown}`}</Button>\n        </div>\n      )\n    }\n\n    render() {\n        return (\n          <div className=\"App\">\n            {this.state.model === 'login' && this.renderLogin()}\n            {this.state.model === 'poetry-turing-test' && this.renderPoetryTuringTest()}\n            {this.state.model === 'score-board' && this.renderScoreBoard()}\n            {this.state.model === 'poetry-turing-test' && this.state.mode !== 'easy' && this.renderTimer()}\n          </div>\n        )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}